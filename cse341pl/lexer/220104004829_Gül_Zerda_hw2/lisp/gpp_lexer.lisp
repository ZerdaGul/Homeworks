(defun token-equal (word)
  
    (cond
        ( (string-equal word "AND") (string "KW_AND"))
        ( (string-equal word "and") (string "KW_AND"))
        ( (string-equal word "OR") (string "KW_OR" ))
        ( (string-equal word "or") (string "KW_OR" ))
        ( (string-equal word "NOT") (string "KW_NOT"))
        ( (string-equal word "not") (string "KW_NOT"))
        ( (string-equal word "EQUAL") (string "KW_EQUAL"))
        ( (string-equal word "equal") (string "KW_EQUAL"))
        ( (string-equal word "LESS") (string "KW_LESS"))
        ( (string-equal word "less") (string "KW_LESS"))
        ( (string-equal word "NIL") (string"KW_NIL"))
        ( (string-equal word "nil") (string"KW_NIL"))
        ( (string-equal word "LIST") (string "KW_LIST"))
        ( (string-equal word "list") (string "KW_LIST"))
        ( (string-equal word "APPEND") (string "KW_APPEND"))
        ( (string-equal word "append") (string "KW_APPEND"))
        ( (string-equal word "CONCAT") (string "KW_CONCAT")) 
        ( (string-equal word "concat") (string "KW_CONCAT")) 
        ( (string-equal word "SET") (string "KW_SET")) 
        ( (string-equal word "set") (string "KW_SET"))
        ( (string-equal word "DEF") (string "KW_DEF")) 
        ( (string-equal word "def") (string "KW_DEF"))
        ( (string-equal word "FOR") (string "KW_FOR"))
        ( (string-equal word "for") (string "KW_FOR"))
        ( (string-equal word "IF") (string "KW_IF")) 
        ( (string-equal word "if") (string "KW_IF"))
        ( (string-equal word "EXIT") (string "KW_EXIT")) 
        ( (string-equal word "exit") (string "KW_EXIT")) 
        ( (string-equal word "LOAD") (string "KW_LOAD"))
        ( (string-equal word "load") (string "KW_LOAD"))
        ( (string-equal word "DISP") (string "KW_DISP"))
        ( (string-equal word "disp") (string "KW_DISP"))
        ( (string-equal word "TRUE") (string "KW_TRUE"))
        ( (string-equal word "true") (string "KW_TRUE"))
        ( (string-equal word "FALSE") (string "KW_FALSE")) 
        ( (string-equal word "false") (string "KW_FALSE")) 
        ((string-equal word "+") (string "OP_PLUS"))
        ((string-equal word "-") (string "OP_MINUS"))
        ((string-equal word "*") (string "OP_MULT"))
        ((string-equal word "/") (string "OP_DIV"))
        ((string-equal word "(") (string "OP_OP"))
        ((string-equal word ")") (string "OP_CP"))
        ((string-equal word ",") (string "OP_COMMA"))
        ((string-equal word ";;") (string "COMMENT"))
        ( t (string "nothing"))
    )
)

(defun checkDigit (str)
    (cond
        ((string-equal str "0") (string "true"))
        ((string-equal str "1") (string "true"))
        ((string-equal str "2") (string "true"))
        ((string-equal str "3") (string "true"))
        ((string-equal str "4") (string "true"))
        ((string-equal str "5") (string "true"))
        ((string-equal str "6") (string "true"))
        ((string-equal str "7") (string "true"))
        ((string-equal str "8") (string "true"))
        ((string-equal str "9") (string "true"))
        ( t (string "false"))
    )
)


(defun tokenize-sentence (sentence)
  (let* ((tokens '())
         (current-token "")
         (inside-parentheses nil))
    (dotimes (i (length sentence))
      (let ((char (char sentence i)))
        (cond
          ((char= char #\()
           (if (not (string= current-token ""))
               (push current-token tokens))
           (push (string char) tokens)
           (setq inside-parentheses nil)
           (setf current-token ""))
          ((char= char #\))
           (if (not (string= current-token ""))
               (push current-token tokens))
           (push (string char) tokens)
           (setq inside-parentheses nil)
           (setf current-token ""))
          ((and (char= char #\Space) (not inside-parentheses))
           (if (not (string= current-token ""))
               (push current-token tokens))
           (setf current-token ""))
          (t
           (setf current-token (concatenate 'string current-token (string char)))))))
    (if (not (string= current-token ""))
        (push current-token tokens))
    (reverse tokens)))


(defun gppinterpreter ()
(let* ((input (read-line)))
  (let* ((tokens (tokenize-sentence input)))
    (dolist (word tokens)
      (let ((result (token-equal word)))
        (if (string= result "nothing")
            (if (and (>= (length word) 2) (string= (subseq word 0 2) ";;"))
                (format t " COMMENT~%")
                (let ((result2 (checkDigit (string (char word 0))))
                      )
                  (if (string= result2 "true")
                      (format t " VALUEF~%")
                      (format t " IDENTIFIER~%"))
                ))
            (format t " ~a~% " result))
        )
      )
    )
  )
)

(gppinterpreter)
